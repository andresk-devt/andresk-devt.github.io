{"ast":null,"code":"export default {\n  name: \"LanguageSelector\",\n  data() {\n    return {\n      isOpen: false,\n      selector: {\n        selectedLanguageFlag: {\n          flag: \"usa\",\n          value: 'en'\n        },\n        optionLanguageFlag: {\n          flag: \"colombia\",\n          value: 'es'\n        }\n      }\n    };\n  },\n  created() {\n    if (localStorage.getItem(\"selected-language\")) {\n      if (localStorage.getItem(\"selected-language\") === 'es') {\n        this.selector.selectedLanguageFlag = {\n          flag: \"colombia\",\n          value: 'es'\n        };\n        this.selector.optionLanguageFlag = {\n          flag: \"usa\",\n          value: 'en'\n        };\n      } else if (localStorage.getItem(\"selected-language\") === 'en') {\n        this.selector.selectedLanguageFlag = {\n          flag: \"usa\",\n          value: 'en'\n        };\n        this.selector.optionLanguageFlag = {\n          flag: \"colombia\",\n          value: 'es'\n        };\n      }\n    }\n  },\n  watch: {\n    \"$i18n.locale\": selectedLanguage => {\n      localStorage.setItem(\"selected-language\", selectedLanguage);\n      console.log('cambio el lenguaje');\n    }\n  },\n  methods: {\n    toggleDropdown() {\n      this.isOpen = !this.isOpen;\n    },\n    changeLanguage() {\n      const {\n        selectedLanguageFlag\n      } = this.selector;\n      const {\n        optionLanguageFlag\n      } = this.selector;\n      this.selector.selectedLanguageFlag = optionLanguageFlag;\n      this.selector.optionLanguageFlag = selectedLanguageFlag;\n      this.$i18n.locale = this.selector.selectedLanguageFlag.value;\n      this.isOpen = false;\n    },\n    imageURL(flag) {\n      return `${require(`../assets/flags/${flag}.png`)}`;\n    }\n  }\n};","map":{"version":3,"mappings":"AAeA;EACAA;EACAC;IACA;MACAC;MACAC;QACAC;UAAAC;UAAAC;QAAA;QACAC;UAAAF;UAAAC;QAAA;MACA;IACA;EACA;EACAE;IACA;MACA;QACA;UAAAH;UAAAC;QAAA;QACA;UAAAD;UAAAC;QAAA;MACA;QACA;UAAAD;UAAAC;QAAA;QACA;UAAAD;UAAAC;QAAA;MACA;IACA;EACA;EACAG;IACA;MACAC;MACAC;IACA;EACA;EACAC;IACAC;MACA;IACA;IACAC;MACA;QAAAV;MAAA;MACA;QAAAG;MAAA;MACA;MACA;MACA;MACA;IACA;IACAQ;MACA;IACA;EACA;AACA","names":["name","data","isOpen","selector","selectedLanguageFlag","flag","value","optionLanguageFlag","created","watch","localStorage","console","methods","toggleDropdown","changeLanguage","imageURL"],"sourceRoot":"src/components","sources":["LanguageSelector.vue"],"sourcesContent":["<template>\n  <div class=\"language-selector\">\n    <div class=\"selected-language\" @click=\"toggleDropdown\">\n      <img :src=\"imageURL(this.selector.selectedLanguageFlag.flag)\" alt=\"\" />\n      <div class=\"dropdown-arrow\"  :class=\"isOpen ? 'is-open' : ''\">\n        <ion-icon name=\"chevron-forward-outline\"></ion-icon>\n      </div>\n    </div>\n    <div class=\"language-selector-list\" v-if=\"isOpen\" @click=\"changeLanguage()\">\n      <img :src=\"imageURL(this.selector.optionLanguageFlag.flag)\" alt=\"\" />\n    </div>\n  </div>\n</template>\n\n<script>\nexport default {\n  name: \"LanguageSelector\",\n  data() {\n    return {\n      isOpen: false,\n      selector: {\n        selectedLanguageFlag: { flag: \"usa\", value: 'en' },\n        optionLanguageFlag: { flag: \"colombia\", value: 'es' }\n      }\n    };\n  },\n  created() {\n    if (localStorage.getItem(\"selected-language\")) {\n      if (localStorage.getItem(\"selected-language\") === 'es') {\n        this.selector.selectedLanguageFlag = { flag: \"colombia\", value: 'es' };\n        this.selector.optionLanguageFlag = { flag: \"usa\", value: 'en' };\n      } else if (localStorage.getItem(\"selected-language\") === 'en') {\n        this.selector.selectedLanguageFlag = { flag: \"usa\", value: 'en' };\n        this.selector.optionLanguageFlag = { flag: \"colombia\", value: 'es' };\n      }\n    }\n  },\n  watch: {\n    \"$i18n.locale\": (selectedLanguage) => {\n      localStorage.setItem(\"selected-language\", selectedLanguage);\n      console.log('cambio el lenguaje');\n    },\n  },\n  methods: {\n    toggleDropdown() {\n      this.isOpen = !this.isOpen;\n    },\n    changeLanguage() {\n      const { selectedLanguageFlag } = this.selector;\n      const { optionLanguageFlag } = this.selector;\n      this.selector.selectedLanguageFlag = optionLanguageFlag;\n      this.selector.optionLanguageFlag = selectedLanguageFlag;\n      this.$i18n.locale = this.selector.selectedLanguageFlag.value;\n      this.isOpen = false;\n    },\n    imageURL(flag) {\n      return `${require(`../assets/flags/${flag}.png`)}`;\n    }\n  },\n};\n</script>\n\n<style lang=\"scss\" scoped>\n.language-selector {\n  display: flex;\n  flex-direction: column;\n  background: rgb(34, 36, 56);\n  filter: brightness(.9);\n  border-radius: 7px;\n  padding: 5px;\n  &-list {\n    cursor: pointer;\n    &:hover {\n      // background: rgba(19, 20, 31, 0.493);\n    }\n  }\n}\n.selected-language {\n  display: flex;\n  cursor: pointer;\n}\n.dropdown-arrow {\n  // cursor: pointer;\n}\nion-icon {\n  color: white;\n}\n.is-open ion-icon {\n  transform: rotate(90deg);\n  transition: 0.3s all;\n}\n.is-closed ion-icon {\n  transform: rotate(0deg);\n  transition: 0.3s all;\n}\n</style>\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}